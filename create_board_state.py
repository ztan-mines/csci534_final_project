#!/usr/local/bin/python3

import numpy as np
import time
import random

# create new file
filename = "./BoardStates/autogenerated_" + str(int(time.time() * 1000))
outfile = open(filename, 'w')

# randomly fill board grid
board_height = 20
board_width = 10
board = np.zeros([board_width, board_height])  # start sideways for easier generation
random.seed(int(time.time() * 1000))
fill_chance = 0.125
first_row_fill_chance = 1
first_pass = True
for row in range(1, len(board)):
    for col in range(len(board[row]) - 1):
        if random.random() <= fill_chance:
            board[row][col] = 1
        if first_pass:
            if random.random() <= first_row_fill_chance:
                board[0][col] = 1
            first_pass = False


# gravity (doesn't create holes, but that's okay)
def enforce_gravity(board):
    for row in range(len(board)):
        height = sum(board[row])
        for col in range(len(board[row])-1, -1, -1):
            board[row][col] = 0
            if height != 0:
                board[row][col] = 1
                height -= 1
    return board.T

def clear_complete_rows(board, board_width):
    for row in range(len(board)):
        if sum(board[row]) == board_width:
            # row is complete, remove and replace at top
            board = np.delete(board, row, 0)
            board = np.insert(board, 0, np.zeros([board_width]), 0)
            return True, board
    return False, board
    



board = enforce_gravity(board)

while True:
    should_continue, board = clear_complete_rows(board, board_width)
    if not should_continue:
        break;

for row in board:
    for col in row:
        outfile.write(str(int(col)) + " ")
    outfile.write("\n")